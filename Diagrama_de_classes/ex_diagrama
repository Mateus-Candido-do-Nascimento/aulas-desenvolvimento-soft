from abc import ABC, abstractmethod
from datetime import date


class Historico:
    def __init__(self):
        self.transacoes = []
    
    def adicionar_transacao(self, transacao):
        self.transacoes.append(transacao)


class Transacao(ABC):
    @abstractmethod
    def registrar(self, conta):
        pass


class Deposito(Transacao):
    def __init__(self, valor):
        self.valor = valor
    
    def registrar(self, conta):
        conta._saldo += self.valor
        conta.historico.adicionar_transacao(f'DepÃ³sito de {self.valor}')
        return True


class Saque(Transacao):
    def __init__(self, valor):
        self.valor = valor
    
    def registrar(self, conta):
        if conta._saldo >= self.valor:
            conta._saldo -= self.valor
            conta.historico.adicionar_transacao(f'Saque de {self.valor}')
            return True
        return False


class Conta:
    def __init__(self, cliente, numero, agencia):
        self._saldo = 0.0
        self.numero = numero
        self.agencia = agencia
        self.cliente = cliente
        self.historico = Historico()
    
    @property
    def saldo(self):
        return self._saldo
    
    def sacar(self, valor):
        saque = Saque(valor)
        return saque.registrar(self)
    
    def depositar(self, valor):
        deposito = Deposito(valor)
        return deposito.registrar(self)
    
    @staticmethod
    def nova_conta(cliente, numero, agencia):
        return Conta(cliente, numero, agencia)


class ContaCorrente(Conta):
    def __init__(self, cliente, numero, agencia, limite, limite_saques):
        super().__init__(cliente, numero, agencia)
        self.limite = limite
        self.limite_saques = limite_saques


class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []
    
    def adicionar_conta(self, conta):
        self.contas.append(conta)
    
    def realizar_transacao(self, conta, transacao):
        return transacao.registrar(conta)


class PessoaFisica(Cliente):
    def __init__(self, nome, cpf, data_nascimento, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento
